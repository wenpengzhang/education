<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.edu.core.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="com.edu.core.domain.User" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="accounts" property="accounts" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="realname" property="realname" jdbcType="VARCHAR" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="stype" property="stype" jdbcType="VARCHAR" />
    <result column="pstate" property="pstate" jdbcType="VARCHAR" />
    <result column="registertime" property="registertime" jdbcType="TIMESTAMP" />
    <result column="recstate" property="recstate" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, accounts, password, nickname, realname, mobile, stype, pstate, registertime, 
    recstate
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from user
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.edu.core.domain.User" >
    insert into user (id, accounts, password, 
      nickname, realname, mobile, 
      stype, pstate, registertime, 
      recstate)
    values (#{id,jdbcType=VARCHAR}, #{accounts,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{nickname,jdbcType=VARCHAR}, #{realname,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, 
      #{stype,jdbcType=VARCHAR}, #{pstate,jdbcType=VARCHAR}, #{registertime,jdbcType=TIMESTAMP}, 
      #{recstate,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.edu.core.domain.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="accounts != null" >
        accounts,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="nickname != null" >
        nickname,
      </if>
      <if test="realname != null" >
        realname,
      </if>
      <if test="mobile != null" >
        mobile,
      </if>
      <if test="stype != null" >
        stype,
      </if>
      <if test="pstate != null" >
        pstate,
      </if>
      <if test="registertime != null" >
        registertime,
      </if>
      <if test="recstate != null" >
        recstate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="accounts != null" >
        #{accounts,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="realname != null" >
        #{realname,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="stype != null" >
        #{stype,jdbcType=VARCHAR},
      </if>
      <if test="pstate != null" >
        #{pstate,jdbcType=VARCHAR},
      </if>
      <if test="registertime != null" >
        #{registertime,jdbcType=TIMESTAMP},
      </if>
      <if test="recstate != null" >
        #{recstate,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.edu.core.domain.User" >
    update user
    <set >
      <if test="accounts != null" >
        accounts = #{accounts,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="realname != null" >
        realname = #{realname,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null" >
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="stype != null" >
        stype = #{stype,jdbcType=VARCHAR},
      </if>
      <if test="pstate != null" >
        pstate = #{pstate,jdbcType=VARCHAR},
      </if>
      <if test="registertime != null" >
        registertime = #{registertime,jdbcType=TIMESTAMP},
      </if>
      <if test="recstate != null" >
        recstate = #{recstate,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.edu.core.domain.User" >
    update user
    set accounts = #{accounts,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      realname = #{realname,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      stype = #{stype,jdbcType=VARCHAR},
      pstate = #{pstate,jdbcType=VARCHAR},
      registertime = #{registertime,jdbcType=TIMESTAMP},
      recstate = #{recstate,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <select id="selectByCode" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from user
    where accounts = #{code,jdbcType=VARCHAR}
  </select>
  <select id="selectBylimit" resultType="com.edu.core.domain.User">
    select 
    <include refid="Base_Column_List" />
    from user
    where  ${sqlwhere} LIMIT #{offset},#{limit} 
  </select>
  <select id="selectBySql" resultType="com.edu.core.domain.User">
    select 
    <include refid="Base_Column_List" />
    from user
	where  ${sqlwhere}
  </select>
  <select id="getCount" resultType="java.lang.Integer" >
 	  select count(*) from user
 	  where  ${sqlwhere}
  </select>
</mapper>